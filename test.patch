Subject: [PATCH] test
---
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/.gitignore	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,35 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/pom.xml	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>ru.liga</groupId>
+    <artifactId>loading-of-cars</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>21</maven.compiler.source>
+        <maven.compiler.target>21</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.13.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>5.11.0</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+</project>
\ No newline at end of file
Index: src/main/java/ru/liga/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/Main.java b/src/main/java/ru/liga/Main.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/Main.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,39 @@
+package ru.liga;
+
+import ru.liga.fileprocessing.ScannerFile;
+
+import ru.liga.parcel.Parcels;
+import ru.liga.tuuck.Garage;
+import ru.liga.tuuck.Truck;
+import ru.liga.sevice.ProcessLoaderService;
+import ru.liga.sevice.imp.ProcessLoaderServiceNewImpl;
+
+import java.util.Scanner;
+
+public class Main {
+
+
+    public static void main(String[] args) {
+        Scanner scanner = new Scanner(System.in);
+
+        System.out.println("Введите пруть к файлу :");
+        ScannerFile scannerFile = new ScannerFile ();
+        Parcels parcels = new Parcels(scannerFile.parsFile("src/main/resources/data"));
+        ProcessLoaderService processLoaderServiceImpl = new ProcessLoaderServiceNewImpl();
+
+        Garage garage = processLoaderServiceImpl.runLoader(parcels,6,6,"Single");
+
+        for(Truck trucks : garage.getTrucks()){
+
+            for(String str : trucks.getTruck()){
+
+                System.out.println(str);
+
+            }
+            System.out.println();
+            System.out.println();
+        }
+
+
+    }
+}
\ No newline at end of file
Index: src/main/java/ru/liga/fileprocessing/ScannerFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/fileprocessing/ScannerFile.java b/src/main/java/ru/liga/fileprocessing/ScannerFile.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/fileprocessing/ScannerFile.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,69 @@
+package ru.liga.fileprocessing;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Stream;
+
+public class ScannerFile {
+
+    public List<int[][]> parsFile(String filePath) {
+
+        try {
+            Path path = Paths.get(filePath);
+            Stream<String> lines = Files.lines(path);
+
+            return stringProcess(lines.toArray(String[]::new));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+
+    }
+
+    private List<int[][]> stringProcess(String[] lines) {
+        List<int[][]> parcels = new ArrayList<>();
+        List<String> parcelList = new ArrayList<>();
+        for (int i = 0; i < lines.length; i++) {
+            if (!lines[i].isEmpty()) {
+
+                parcelList.add(lines[i]);
+
+            } else {
+
+                parcels.add(intParcel(parcelList));
+                parcelList.clear();
+
+            }
+
+        }
+
+        if(!parcelList.isEmpty()){
+            parcels.add(intParcel(parcelList));
+            parcelList.clear();
+        }
+
+        return parcels;
+
+    }
+
+    private int[][] intParcel(List<String> parcel) {
+
+        int[][] intMass = new int[parcel.size()][parcel.getLast().length()];
+
+        for (int i = 0; i < parcel.size(); i++) {
+            String str = parcel.get(i);
+            for (int j = 0; j < str.length(); j++) {
+                char letter = str.charAt(j);
+                intMass[i][j] = Character.getNumericValue(letter);
+            }
+
+        }
+
+        return intMass;
+
+    }
+
+}
Index: src/main/java/ru/liga/parcel/ParcelContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/parcel/ParcelContainer.java b/src/main/java/ru/liga/parcel/ParcelContainer.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/parcel/ParcelContainer.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,39 @@
+package ru.liga.parcel;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class ParcelContainer {
+
+    private final int[][] parcel;
+
+
+
+
+    public ParcelContainer(int[][] parcel) {
+
+        this.parcel = parcel;
+
+
+    }
+
+
+    public int[][] getParcel() {
+
+        return parcel;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        ParcelContainer that = (ParcelContainer) o;
+        return Arrays.deepEquals(parcel, that.parcel);
+    }
+
+    @Override
+    public int hashCode() {
+        return Arrays.deepHashCode(parcel);
+    }
+
+}
\ No newline at end of file
Index: src/main/java/ru/liga/parcel/Parcels.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/parcel/Parcels.java b/src/main/java/ru/liga/parcel/Parcels.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/parcel/Parcels.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,57 @@
+package ru.liga.parcel;
+
+import ru.liga.parcel.ParcelContainer;
+
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+
+public class Parcels {
+
+    private final LinkedHashMap<ParcelContainer, Integer> parcel;
+
+    public List<int[][]> getParcelList() {
+        return parcelList;
+    }
+
+    private final List<int[][]> parcelList;
+
+    public Parcels(List<int[][]> parcelsInt) {
+
+        this.parcel = new LinkedHashMap<ParcelContainer, Integer>();
+        this.parcelList = parcelsInt;
+        setParcels(parcelsInt);
+
+    }
+
+    private void setParcels(List<int[][]> parcelsInt) {
+
+        for (int[][] inParcel: parcelsInt) {
+
+            ParcelContainer parcelContainer = new ParcelContainer(inParcel);
+
+            if (parcel.containsKey(parcelContainer)) {
+
+                parcel.put(parcelContainer, parcel.get(parcelContainer) + 1);
+            } else {
+
+                parcel.put(parcelContainer, 1);
+
+            }
+
+        }
+
+    }
+
+    public LinkedHashMap<ParcelContainer, Integer> getParcel() {
+
+        return parcel;
+
+    }
+    public int getTotalParcelCount() {
+
+        return parcelList.size();
+    }
+
+}
Index: src/main/java/ru/liga/sevice/CheckInParcelService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/CheckInParcelService.java b/src/main/java/ru/liga/sevice/CheckInParcelService.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/CheckInParcelService.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,6 @@
+package ru.liga.sevice;
+
+public interface CheckInParcelService {
+
+    int checkInParcel(int[][] parcel, int[][] scheme);
+}
Index: src/main/java/ru/liga/sevice/GetStartPositionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/GetStartPositionService.java b/src/main/java/ru/liga/sevice/GetStartPositionService.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/GetStartPositionService.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,5 @@
+package ru.liga.sevice;
+
+public interface GetStartPositionService {
+    int getStartPosition(int[] lineShem);
+}
Index: src/main/java/ru/liga/sevice/MachineLoaderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/MachineLoaderService.java b/src/main/java/ru/liga/sevice/MachineLoaderService.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/MachineLoaderService.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,7 @@
+package ru.liga.sevice;
+
+public interface MachineLoaderService{
+
+    int[][] addParcels(int[][] parcels, int heightMax, int widthMax, int[][] scheme);
+
+}
Index: src/main/java/ru/liga/sevice/ProcessLoaderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/ProcessLoaderService.java b/src/main/java/ru/liga/sevice/ProcessLoaderService.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/ProcessLoaderService.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,10 @@
+package ru.liga.sevice;
+
+import ru.liga.parcel.Parcels;
+import ru.liga.tuuck.Garage;
+
+public interface ProcessLoaderService {
+
+    Garage runLoader(Parcels parcels, int truckHeight, int truckWidth, String algoritmName);
+
+}
Index: src/main/java/ru/liga/sevice/imp/CheckInParcelServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/imp/CheckInParcelServiceImpl.java b/src/main/java/ru/liga/sevice/imp/CheckInParcelServiceImpl.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/imp/CheckInParcelServiceImpl.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,39 @@
+package ru.liga.sevice.imp;
+
+import ru.liga.sevice.CheckInParcelService;
+
+public class CheckInParcelServiceImpl implements CheckInParcelService {
+    @Override
+    public int checkInParcel(int[][] parcel, int[][] scheme) {
+
+        int parcelHeights = parcel.length;
+        int parcelWidths = parcel[parcel.length - 1].length;
+        int lineWidths = 0;
+        int lineMaxWidths = 0;
+        for (int i = 0; i < scheme.length; i++) {
+
+            int[] lain = scheme[i];
+            for (int j = 0; j < lain.length; j++) {
+
+                if (lain[j] == 0) {
+                    if (i == 0 || scheme[i - 1][j] != 0) {
+                        lineWidths++;
+                    } else {
+                        if (lineWidths > lineMaxWidths) {
+                            lineMaxWidths = lineWidths;
+                        }
+                        lineWidths = 0;
+                    }
+                } else {
+                    lineWidths = 0;
+                }
+            }
+            if (lineMaxWidths >= parcelWidths || lineWidths >= parcelWidths) {
+                if (scheme.length - i >= parcelHeights) {
+                    return i;
+                }
+            }
+        }
+        return -1;
+    }
+}
Index: src/main/java/ru/liga/sevice/imp/GetStartPositionServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/imp/GetStartPositionServiceImpl.java b/src/main/java/ru/liga/sevice/imp/GetStartPositionServiceImpl.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/imp/GetStartPositionServiceImpl.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,26 @@
+package ru.liga.sevice.imp;
+
+import ru.liga.sevice.GetStartPositionService;
+
+public class GetStartPositionServiceImpl implements GetStartPositionService {
+    @Override
+    public int getStartPosition(int[] lineShem) {
+        int maxLength = 0;
+        int startPosition = -1;
+        int currentLength = 0;
+
+        for (int i = 0; i < lineShem.length; i++) {
+            if (lineShem[i] == 0) {
+                currentLength++;
+                if (currentLength > maxLength) {
+                    maxLength = currentLength;
+                    startPosition = i - currentLength + 1;
+                }
+            } else {
+                currentLength = 0;
+            }
+        }
+
+        return startPosition;
+    }
+}
Index: src/main/java/ru/liga/sevice/imp/MachineLoaderServiceBaseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceBaseService.java b/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceBaseService.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceBaseService.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,79 @@
+package ru.liga.sevice.imp;
+
+
+import ru.liga.sevice.MachineLoaderService;
+
+public class MachineLoaderServiceBaseService implements MachineLoaderService {
+    private int heightMax = 0;
+    private int widthMax = 0;
+    private int startI = 0;
+    private int startJ = 0;
+
+    @Override
+    public int[][] addParcels(int[][] parcel, int heightMax, int widthMax, int[][] scheme) {
+
+        updateParam(scheme, heightMax, widthMax);
+        int widths = parcel[parcel.length - 1].length;
+        int heights = parcel.length;
+        int k = parcel.length - 1;
+        int l = 0;
+        int[][] field1 = scheme;
+
+
+        if (heightMax >= parcel.length + startI && widthMax >= parcel[0].length + startJ) {
+            for (int i = startI; i < startI + heights; i++) {
+
+                for (int j = startJ; j < startJ + widths; j++) {
+
+                    field1[i][j] = parcel[k][l];
+                    l++;
+
+                }
+
+                l = 0;
+                k--;
+
+            }
+            updateParam(field1, heightMax, widthMax);
+
+            return field1;
+        }
+
+        return null;
+    }
+
+    private void updateParam(int[][] field, int height, int width) {
+        int maxH = 0;
+        int maxW = 0;
+        int[] startJTemp = new int[height];
+        for (int i = 0; i < height; i++) {
+            int widthTemp = 0;
+            maxH = 0;
+            for (int j = 0; j < width; j++) {
+                int temp = field[i][j];
+                if ((temp == 0 && i == 0) || (i != 0 && field[i][j] == 0 && field[i - 1][j] == 1)) {
+                    widthTemp++;
+
+                    if ((field[i][j] == 0) && maxH == 0) {
+                        startJTemp[i] = j;
+                        maxH = 1;
+
+                    }
+
+                }
+            }
+            if (widthTemp > maxW) {
+                heightMax = height - i;
+                maxW = widthTemp;
+                widthMax = widthTemp;
+                startI = i;
+                startJ = startJTemp[i];
+            }
+        }
+
+    }
+
+}
+
+
+
Index: src/main/java/ru/liga/sevice/imp/MachineLoaderServiceOptimalImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceOptimalImpl.java b/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceOptimalImpl.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceOptimalImpl.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,43 @@
+package ru.liga.sevice.imp;
+
+import ru.liga.sevice.CheckInParcelService;
+import ru.liga.sevice.MachineLoaderService;
+import ru.liga.sevice.GetStartPositionService;
+
+public class MachineLoaderServiceOptimalImpl implements MachineLoaderService {
+
+    CheckInParcelService checkInParcelService;
+    GetStartPositionService getStartPositionService;
+
+    public MachineLoaderServiceOptimalImpl(){
+        this.getStartPositionService = new GetStartPositionServiceImpl();
+        this.checkInParcelService = new CheckInParcelServiceImpl();
+    }
+    @Override
+    public int[][] addParcels(int[][] parcel, int heightMax, int widthMax, int[][] scheme) {
+        int widths = parcel[parcel.length - 1].length;
+        int heights = parcel.length;
+        int k = parcel.length - 1;
+        int l = 0;
+        int[][] resScheme = scheme;
+        int startI = checkInParcelService.checkInParcel(parcel, scheme);
+
+        if (startI >= 0) {
+            int startJ = getStartPositionService.getStartPosition(scheme[startI]);
+            for (int i = startI; i < startI + heights; i++) {
+                for (int j = startJ; j < startJ + widths; j++) {
+                    resScheme[i][j] = parcel[k][l];
+                    l++;
+                }
+                l = 0;
+                k--;
+            }
+            return resScheme;
+        }
+        return null;
+    }
+
+}
+
+
+
Index: src/main/java/ru/liga/sevice/imp/MachineLoaderServiceSingleImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceSingleImpl.java b/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceSingleImpl.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/imp/MachineLoaderServiceSingleImpl.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,47 @@
+package ru.liga.sevice.imp;
+
+import ru.liga.sevice.CheckInParcelService;
+import ru.liga.sevice.GetStartPositionService;
+import ru.liga.sevice.MachineLoaderService;
+
+import java.util.Arrays;
+
+public class MachineLoaderServiceSingleImpl implements MachineLoaderService {
+
+    CheckInParcelService checkInParcelService;
+    GetStartPositionService getStartPositionService;
+
+    public MachineLoaderServiceSingleImpl() {
+        this.getStartPositionService = new GetStartPositionServiceImpl();
+        this.checkInParcelService = new CheckInParcelServiceImpl();
+    }
+
+    @Override
+    public int[][] addParcels(int[][] parcel, int heightMax, int widthMax, int[][] scheme) {
+        if (Arrays.stream(scheme[0]).sum() > 0) {
+            return null;
+        }
+        int widths = parcel[parcel.length - 1].length;
+        int heights = parcel.length;
+        int k = parcel.length - 1;
+        int l = 0;
+        int[][] resScheme = scheme;
+        int startI = checkInParcelService.checkInParcel(parcel, scheme);
+
+        if (startI >= 0) {
+            int startJ = getStartPositionService.getStartPosition(scheme[startI]);
+            for (int i = startI; i < startI + heights; i++) {
+                for (int j = startJ; j < startJ + widths; j++) {
+                    resScheme[i][j] = parcel[k][l];
+                    l++;
+                }
+                l = 0;
+                k--;
+            }
+            return resScheme;
+        }
+        return null;
+    }
+
+}
+
Index: src/main/java/ru/liga/sevice/imp/ProcessLoaderServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/imp/ProcessLoaderServiceImpl.java b/src/main/java/ru/liga/sevice/imp/ProcessLoaderServiceImpl.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/imp/ProcessLoaderServiceImpl.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,97 @@
+package ru.liga.sevice.imp;
+
+import ru.liga.parcel.ParcelContainer;
+import ru.liga.parcel.Parcels;
+import ru.liga.sevice.MachineLoaderService;
+import ru.liga.sevice.ProcessLoaderService;
+import ru.liga.tuuck.Garage;
+import ru.liga.tuuck.Truck;
+
+import java.util.Map;
+import java.util.Objects;
+
+public class ProcessLoaderServiceImpl implements ProcessLoaderService {
+
+    private final MachineLoaderService machineLoaderServiceImpl;
+    private final MachineLoaderService baseLoader;
+    private Garage garage;
+
+    public ProcessLoaderServiceImpl() {
+        baseLoader = new MachineLoaderServiceBaseService();
+        garage = new Garage();
+        machineLoaderServiceImpl = new MachineLoaderServiceOptimalImpl();
+
+    }
+
+    public Garage getGarage() {
+        return garage;
+    }
+
+    @Override
+    public Garage runLoader(Parcels parcels, int truckHeight, int truckWidth, String algorithmName) {
+
+        Truck truck = new Truck(truckHeight, truckWidth, "name");
+        int k = 0;
+
+        for (Map.Entry<ParcelContainer, Integer> parcel : parcels.getParcel().entrySet()) {
+            k++;
+            for (int i = 0; i < parcel.getValue(); i++) {
+
+                int[][] scheme = truck.getScheme();
+                scheme = addParcels(parcel.getKey().getParcel(), scheme, algorithmName, truckHeight, truckWidth);
+
+                if (scheme != null) {
+
+                    truck.setTruck(scheme);
+
+                }
+                if ((scheme == null) || (i == parcel.getValue() - 1 && k == parcels.getParcel().size() - 1)) {
+
+                    garage.addTruck(truck);
+                    truck = new Truck(truckHeight, truckWidth, "name");
+                    scheme = addParcels(parcel.getKey().getParcel(), truck.getScheme(), algorithmName, truckHeight, truckWidth);
+                    truck.setTruck(scheme);
+
+                }
+            }
+        }
+
+
+        return garage;
+    }
+
+
+    private String[] convertTruck(int[][] scheme, ParcelContainer parcels, String[] truck) {
+
+        int k = 0;
+        String[] str = new String[7];
+
+        for (int i = scheme.length - 1; i >= 0; i--) {
+            str[k] = "+";
+            for (int j = 0; j < scheme.length; j++) {
+                if (scheme[i][j] != 0 && truck[k].charAt(j + 1) == ' ') {
+                    truck[k] = truck[k].substring(0, j + 1) + parcels.getParcel()[0][0] + truck[k].substring(j + 2);
+                }
+            }
+            k++;
+        }
+        return truck;
+
+    }
+
+    public int[][] addParcels(int[][] parcel, int[][] scheme, String algorithmName, int height, int width) {
+        int[][] field1 = new int[height][width];
+        if (Objects.equals(algorithmName, "Base")) {
+            field1 = baseLoader.addParcels(parcel, height, width, scheme);
+        } else {
+            field1 = machineLoaderServiceImpl.addParcels(parcel, height, width, scheme);
+        }
+        if (field1 != null) {
+            return field1;
+        }
+        return null;
+
+    }
+
+
+}
Index: src/main/java/ru/liga/sevice/imp/ProcessLoaderServiceNewImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/sevice/imp/ProcessLoaderServiceNewImpl.java b/src/main/java/ru/liga/sevice/imp/ProcessLoaderServiceNewImpl.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/sevice/imp/ProcessLoaderServiceNewImpl.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,90 @@
+package ru.liga.sevice.imp;
+
+import ru.liga.parcel.Parcels;
+import ru.liga.sevice.MachineLoaderService;
+import ru.liga.sevice.ProcessLoaderService;
+import ru.liga.tuuck.Garage;
+import ru.liga.tuuck.Truck;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class ProcessLoaderServiceNewImpl implements ProcessLoaderService {
+
+    private final MachineLoaderService baseLoader;
+    private final Garage garage;
+    private final MachineLoaderService machineLoaderServiceOptimalImpl;
+    private final MachineLoaderService machineLoaderServiceSingleImpl;
+
+    public ProcessLoaderServiceNewImpl() {
+        machineLoaderServiceOptimalImpl = new MachineLoaderServiceOptimalImpl();
+        baseLoader = new MachineLoaderServiceBaseService();
+        garage = new Garage();
+        machineLoaderServiceSingleImpl = new MachineLoaderServiceSingleImpl();
+    }
+
+
+    @Override
+    public Garage runLoader(Parcels parcels, int truckHeight, int truckWidth, String algorithmName) {
+        garage.addTruck(new Truck(truckHeight, truckWidth, "name"));
+        List<int[][]> parcelList = parcels.getParcelList();
+        int parcelIndex = 0;
+
+        while (!parcelList.isEmpty()) {
+            int[][] scheme = garage.getTruck().getScheme();
+
+            if (addParcelToTruck(parcelList.get(parcelIndex), scheme, algorithmName, truckHeight, truckWidth)) {
+                parcelList.remove(parcelIndex);
+                parcelIndex = 0;
+                continue;
+            }
+
+            if (parcelIndex + 1 >= parcelList.size()) {
+                garage.addTruck(new Truck(truckHeight, truckWidth, "name"));
+                if (!addParcelToTruck(parcelList.get(parcelIndex), garage.getTruck().getScheme(), algorithmName, truckHeight, truckWidth)) {
+                    garage.removeTruc(garage.getTrucks().size() - 1);
+                    System.err.println("Невалидная поылка : " + Arrays.deepToString(parcelList.get(parcelIndex)));
+                }
+                parcelList.remove(parcelIndex);
+                parcelIndex = 0;
+
+            } else {
+                parcelIndex++;
+            }
+        }
+
+        return garage;
+    }
+
+    private boolean addParcelToTruck(int[][] parcel, int[][] scheme, String algorithmName, int height, int width) {
+        int[][] field1 = addParcels(parcel, scheme, algorithmName, height, width);
+        if (field1 != null) {
+            garage.getTruck().setTruck(field1);
+            return true;
+        }
+        return false;
+    }
+
+    private int[][] addParcels(int[][] parcel, int[][] scheme, String algorithmName, int height, int width) {
+        int[][] field1 = new int[height][width];
+        switch (algorithmName) {
+            case "Base":
+                field1 = baseLoader.addParcels(parcel, height, width, scheme);
+                break;
+            case "Optimal":
+                field1 = machineLoaderServiceOptimalImpl.addParcels(parcel, height, width, scheme);
+                break;
+            case "Single":
+                field1 = machineLoaderServiceSingleImpl.addParcels(parcel, height, width, scheme);
+                break;
+            default:
+                System.err.println("Неверный алгоритм: " + algorithmName);
+        }
+
+        if (field1 != null) {
+            return field1;
+        }
+        return null;
+    }
+
+}
Index: src/main/java/ru/liga/tuuck/Garage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/tuuck/Garage.java b/src/main/java/ru/liga/tuuck/Garage.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/tuuck/Garage.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,44 @@
+package ru.liga.tuuck;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Garage {
+
+    private List<Truck> trucks;
+
+    public Garage() {
+
+        trucks = new ArrayList<>();
+    }
+
+    public List<Truck> getTrucks() {
+
+        return trucks;
+    }
+
+    public void removeTruc(int index){
+
+        trucks.remove(index);
+
+    }
+    public void setTrucks(List<Truck> trucksNew) {
+        trucks = trucksNew;
+    }
+
+    public int size(){
+        return  trucks.size();
+    }
+
+    public Truck getTruck() {
+
+        return trucks.getLast();
+
+    }
+    public void addTruck(Truck truck) {
+
+        trucks.add(truck);
+
+    }
+
+}
Index: src/main/java/ru/liga/tuuck/Truck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/liga/tuuck/Truck.java b/src/main/java/ru/liga/tuuck/Truck.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/java/ru/liga/tuuck/Truck.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,76 @@
+package ru.liga.tuuck;
+
+
+public class Truck {
+    private final String name;
+    private final int height;
+    private final int width;
+    private int[][] scheme;
+    private String[] truck;
+    public Truck(int height, int width, String name) {
+        this.width = width;
+        this.height = height;
+        this.truck = createEmptyTruck(height, width);
+        this.name = name;
+        this.scheme = new int[height][width];
+
+    }
+
+    private String[] createEmptyTruck(int height, int width) {
+        String[] truck = new String[height + 1];
+        for (int i = 0; i < height + 1; i++) {
+            truck[i] = "+";
+            for (int j = 0; j < width; j++) {
+                if (i == height) {
+                    truck[i] = truck[i] + "+";
+                } else {
+                    truck[i] = truck[i] + " ";
+                }
+
+            }
+            truck[i] = truck[i] + "+";
+        }
+        return truck;
+    }
+
+    public String[] getTruck() {
+        return truck;
+    }
+
+    public void setTruck(int[][] scheme) {
+
+        int k = 0;
+        String[] truck = getTruck();
+        setScheme(scheme);
+        for (int i = scheme.length - 1; i >= 0; i--) {
+            for (int j = 0; j < scheme.length; j++) {
+                if (scheme[i][j] != 0 && truck[k].charAt(j + 1) == ' ') {
+                    truck[k] = truck[k].substring(0, j + 1) + scheme[i][j] + truck[k].substring(j + 2);
+                }
+            }
+            k++;
+        }
+        this.truck = truck;
+    }
+
+    public int[][] getScheme() {
+        return scheme;
+    }
+
+    public void setScheme(int[][] scheme) {
+        this.scheme = scheme;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public int getWidth() {
+        return width;
+    }
+
+}
Index: src/main/resources/data
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data b/src/main/resources/data
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/main/resources/data	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,39 @@
+55555555
+
+22
+
+777
+7777
+
+666
+666
+
+8888
+8888
+
+999
+999
+999
+
+999
+999
+999
+
+333
+
+777
+7777
+
+1
+
+1
+
+1
+
+22
+
+333
+
+4444
+
+55555
Index: src/test/java/ru/liga/fileprocessing/ScannerFileTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/liga/fileprocessing/ScannerFileTest.java b/src/test/java/ru/liga/fileprocessing/ScannerFileTest.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/test/java/ru/liga/fileprocessing/ScannerFileTest.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,28 @@
+package ru.liga.fileprocessing;
+
+import org.junit.jupiter.api.Test;
+
+import java.util.Arrays;
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.*;
+
+class ScannerFileTest {
+
+
+    @Test
+    public void testparsFile_ValidFile() {
+        // Arrange
+        ScannerFile container = new ScannerFile(); // Предполагаем, что у вас есть класс ParcelContainer
+        String filePath = "src/main/resources/data"; // Путь к вашему тестовому файлу
+
+        //String[] parcels = ;
+
+        assertNotNull(container.parsFile(filePath));
+
+    }
+
+
+
+}
\ No newline at end of file
Index: src/test/java/ru/liga/parcel/ParcelsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/liga/parcel/ParcelsTest.java b/src/test/java/ru/liga/parcel/ParcelsTest.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/test/java/ru/liga/parcel/ParcelsTest.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,65 @@
+package ru.liga.parcel;
+
+import org.junit.jupiter.api.Test;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class ParcelsTest {
+
+    @Test
+    void testEmptyParcels() {
+        List<int[][]> emptyParcels = new ArrayList<>();
+        Parcels parcels = new Parcels(emptyParcels);
+        LinkedHashMap<ParcelContainer, Integer> result = parcels.getParcel();
+        assertTrue(result.isEmpty());
+    }
+
+    @Test
+    void testSingleParcel() {
+        List<int[][]> parcelsInt = new ArrayList<>();
+        int[][] parcel1 = {{6, 6, 6}, {6, 6, 6}};
+        int[][] parcel2 = {{2, 2}};
+        parcelsInt.add(parcel1);
+        parcelsInt.add(parcel2);
+        Parcels parcels = new Parcels(parcelsInt);
+        LinkedHashMap<ParcelContainer, Integer> result = parcels.getParcel();
+        assertEquals(1, result.size());
+        assertTrue(result.containsKey(new ParcelContainer(parcel1)));
+        assertEquals(1, result.get(new ParcelContainer(parcel1)));
+    }
+
+    @Test
+    void testDuplicateParcels() {
+        List<int[][]> parcelsInt = new ArrayList<>();
+        int[][] parcel1 = {{1, 2}, {3, 4}};
+        int[][] parcel2 = {{1, 2}, {3, 4}};
+        parcelsInt.add(parcel1);
+        parcelsInt.add(parcel2);
+        Parcels parcels = new Parcels(parcelsInt);
+        LinkedHashMap<ParcelContainer, Integer> result = parcels.getParcel();
+        assertEquals(1, result.size());
+        assertTrue(result.containsKey(new ParcelContainer(parcel1)));
+        assertEquals(2, result.get(new ParcelContainer(parcel1)));
+    }
+
+    @Test
+    void testDifferentParcels() {
+        List<int[][]> parcelsInt = new ArrayList<>();
+        int[][] parcel1 = {{1, 2}, {3, 4}};
+        int[][] parcel2 = {{5, 6}, {7, 8}};
+        parcelsInt.add(parcel1);
+        parcelsInt.add(parcel2);
+        Parcels parcels = new Parcels(parcelsInt);
+        LinkedHashMap<ParcelContainer, Integer> result = parcels.getParcel();
+        assertEquals(2, result.size());
+        assertTrue(result.containsKey(new ParcelContainer(parcel1)));
+        assertEquals(1, result.get(new ParcelContainer(parcel1)));
+        assertTrue(result.containsKey(new ParcelContainer(parcel2)));
+        assertEquals(1, result.get(new ParcelContainer(parcel2)));
+    }
+
+}
\ No newline at end of file
Index: src/test/java/ru/liga/tuuck/sevice/imp/CheckInParcelServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/liga/tuuck/sevice/imp/CheckInParcelServiceImplTest.java b/src/test/java/ru/liga/tuuck/sevice/imp/CheckInParcelServiceImplTest.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/test/java/ru/liga/tuuck/sevice/imp/CheckInParcelServiceImplTest.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,32 @@
+package ru.liga.tuuck.sevice.imp;
+
+import org.junit.jupiter.api.Test;
+import ru.liga.sevice.CheckInParcelService;
+import ru.liga.sevice.imp.CheckInParcelServiceImpl;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+public class CheckInParcelServiceImplTest {
+
+
+    private CheckInParcelService checkInParcelService = new CheckInParcelServiceImpl();
+
+    @Test
+    void testCheckInParcel_ParcelFits() {
+        int[][] parcel = {{1, 1, 1}, {1, 1, 1}};
+        int[][] scheme = {{0, 0, 0}, {0, 0, 0}};
+        assertEquals(0, checkInParcelService.checkInParcel(parcel, scheme));
+    }
+    @org.junit.jupiter.api.Test
+    void testCheckInParcel_ParcelFits1() {
+        int[][] parcel = {{1, 1, 1}, {1, 1, 1}};
+        int[][] scheme = {{1, 1, 1, 1, 1, 1}, {1, 1, 1, 0, 0, 0}, {1, 1, 1, 0, 0, 0}, {1, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}};
+        assertEquals(1, checkInParcelService.checkInParcel(parcel, scheme));
+    }
+    @Test
+    void testCheckInParcel_ParcelFitsWithGaps3() {
+        int[][] parcel = {{1, 1}, {1, 1}};
+        int[][] scheme = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 1, 1, 1}, {0, 0, 1, 1, 1},{0, 0, 0, 0, 0},{0, 0, 0, 0, 0}};
+        assertEquals(0, checkInParcelService.checkInParcel(parcel, scheme));
+    }
+}
\ No newline at end of file
Index: src/test/java/ru/liga/tuuck/sevice/imp/GetStartPositionServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/liga/tuuck/sevice/imp/GetStartPositionServiceImplTest.java b/src/test/java/ru/liga/tuuck/sevice/imp/GetStartPositionServiceImplTest.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/test/java/ru/liga/tuuck/sevice/imp/GetStartPositionServiceImplTest.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,27 @@
+package ru.liga.tuuck.sevice.imp;
+
+import org.junit.jupiter.api.Test;
+import ru.liga.sevice.GetStartPositionService;
+import ru.liga.sevice.imp.GetStartPositionServiceImpl;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class GetStartPositionServiceImplTest {
+
+    private GetStartPositionService getStartPositionService = new GetStartPositionServiceImpl();
+@Test
+    void testGetStartPosition_MultipleZeros() {
+        int[] lineShem = {1, 0, 1, 1, 1, 0, 0, 0, 1};
+        assertEquals(5, getStartPositionService.getStartPosition(lineShem));
+    }
+    @Test
+    void testGetStartPosition_1() {
+        int[] lineShem = {0, 0, 0 ,0 , 0, 0, 0, 0, 1};
+        assertEquals(0, getStartPositionService.getStartPosition(lineShem));
+    }
+    @Test
+    void testGetStartPosition_2() {
+        int[] lineShem = {1, 0, 0, 0, 0, 0, 0, 0, 1};
+        assertEquals(1, getStartPositionService.getStartPosition(lineShem));
+    }
+}
\ No newline at end of file
Index: src/test/java/ru/liga/tuuck/sevice/imp/MachineLoaderServiceOptimalImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/liga/tuuck/sevice/imp/MachineLoaderServiceOptimalImplTest.java b/src/test/java/ru/liga/tuuck/sevice/imp/MachineLoaderServiceOptimalImplTest.java
new file mode 100644
--- /dev/null	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
+++ b/src/test/java/ru/liga/tuuck/sevice/imp/MachineLoaderServiceOptimalImplTest.java	(revision b2bae9e2d1e6210fa7f1a2827240e4210470b963)
@@ -0,0 +1,42 @@
+package ru.liga.tuuck.sevice.imp;
+
+import org.junit.jupiter.api.Test;
+import ru.liga.sevice.imp.MachineLoaderServiceOptimalImpl;
+
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+class MachineLoaderServiceOptimalImplTest {
+
+    private MachineLoaderServiceOptimalImpl checkInParcel = new MachineLoaderServiceOptimalImpl();
+
+    @Test
+    void testCheckInParcel_ParcelFits() {
+        int[][] parcel = {{1, 1, 1}, {1, 1, 1}};
+        int[][] scheme = {{1, 1, 1, 1, 1, 1}, {1, 1, 1, 0, 0, 0}, {1, 1, 1, 0, 0, 0}, {1, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}};
+       // assertEquals(1, checkInParcel.checkInParcel(parcel, scheme));
+    }
+
+    @Test
+    void testGetStartPosition_MultipleZeros() {
+        int[] lineShem = {1, 0, 1, 1, 1, 0, 0, 0, 1};
+ //       assertEquals(5, checkInParcel.getStartPosition(lineShem));
+    }
+
+    @Test
+    void testAddParcels_ParcelFitsWithGaps2() {
+        int[][] parcel = {{1, 1, 1}, {1, 1, 1}};
+        int[][] scheme = {{1, 1, 1, 0, 0, 0}, {1, 1, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}};
+        int[][] expectedScheme = {{1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}};
+        int[][] resultScheme = checkInParcel.addParcels(parcel, 6, 6, scheme);
+        assertArrayEquals(expectedScheme, resultScheme);
+    }
+@Test
+    void testAddParcels_ParcelFitsWithGaps3() {
+        int[][] parcel = {{1}};
+        int[][] scheme = {{1, 1, 1, 1, 1, 1}, {1, 1, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}};
+        int[][] expectedScheme = {{1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}};
+        int[][] resultScheme = checkInParcel.addParcels(parcel, 6, 6, scheme);
+        assertArrayEquals(expectedScheme, resultScheme);
+    }
+}
\ No newline at end of file
